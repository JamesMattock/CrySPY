#!/usr/bin/env python3

### Header ###

# This script modifies the lammps potentials generated by lammps-interface
# It removes the header and coordinates section
# This prevents overlap with the CrySPY generated one

# It is included in stage 2
# It goes in the lammps_runscript
# It has to run after CrySPY job creation and before job submission

### Import modules ###

import os

### Main ###

# Get number of atoms from stage 2 calculated data file

lammps_file = "lammps.lattice.dat"

lammps_data = open(lammps_file, 'r').readlines()

num_atoms = 0

for line in lammps_data:

    line_comp = line.split()

    if len(line_comp) > 2:
        if line_comp[1] == "atom" and line_comp[2] == "types":
        
            num_atoms = int(line_comp[0])

print(num_atoms) # For debugging

# Get the lammps-interface generated potentials file

data_file = "data.potentials"

pote_data = open(data_file, 'r').readlines()

# Find the Masses section

masses_line = 0

for line in pote_data:
    if line.find('Masses') != -1:
        masses_line = pote_data.index(line)

# Calculate the number of masses for later
# Find the bond coefficients line

bc_line = 0

for line in pote_data:
    if line.find('Bond Coeffs') != -1:
        bc_line = pote_data.index(line)
        
num_of_masses = bc_line - masses_line - 3

if num_of_masses > num_atoms:

    for line in range((bc_line - 1), (masses_line + num_atoms + 1), -1):
    
        del pote_data[line]
        
# Find the new index of the Bond Coefficients line

for line in pote_data:
    if line.find('Bond Coeffs') != -1:
        bc_line = pote_data.index(line)
        
pote_data.insert(bc_line, "\n")

# Delete up to the Masses section

for line in range((masses_line - 1), 0, -1):

    del pote_data[line]
    
del pote_data[0]

# Find the Atoms Section

atoms_line = 0

for line in pote_data:
    if line.find('Atoms') != -1:
        atoms_line = pote_data.index(line)

# Find the Bonds section

bonds_line = 0

for line in pote_data:
    if line.find('Bonds') != -1:
        bonds_line = pote_data.index(line)

# Delete the Atoms section up to the Bonds section

for line in range((bonds_line - 1), atoms_line, -1):

    del pote_data[line]
    
del pote_data[atoms_line]

### Delete any duplicated pair coefficients ###

# Find the Pair Coeffs section
    
pc_line = 0

for line in pote_data:
    if line.find('Pair Coeffs') != -1:
        pc_line = pote_data.index(line)

# Find the Bonds section again
# It's index will have changed after the atom section delete
    
new_bonds_line = 0

for line in pote_data:
    if line.find('Bonds') != -1:
        new_bonds_line = pote_data.index(line)
    
# Calculate the number of lines in the pair coefficient section

num_coeffs = new_bonds_line - pc_line - 3

# Check for duplication, use an if statement for the delete to prevent range issues
# Delete the duplicate pair coefficients
    
if num_coeffs > num_atoms:

    for line in range((new_bonds_line - 1), (pc_line + num_atoms + 1), -1):
    
        del pote_data[line]
        
# Add blank line

for line in pote_data:
    if line.find('Bonds') != -1:
        new_bonds_line = pote_data.index(line)
        
pote_data.insert(new_bonds_line, "\n")

# Delete existing file

os.remove(data_file)

# Recreate with new data

final_line_new = len(pote_data)

with open(data_file, 'w') as f:
    
    for new_line in range(0, final_line_new):
        
        f.write(pote_data[new_line])

### End ###
